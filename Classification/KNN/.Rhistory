? read.csv()
#read csv file
dat=read.csv("ML_2021.csv",header = TRUE)
View(dat)
#show table
fix(dat)
#diminsion
dim(dat)
#sample numbers
dim(dat)[1]
test_set=dim(dat)[1]/5
dat[1]
dat[1,1]
View(dat)
dat[1,]
? for (variable in vector) {
}
dim(dat)[1]
dat[1,]-dat[22,]
dat[1,1:5]-dat[22,1:5]
dat[1,1:dim(dat)[2]]-dat[22,1:dim(dat)[2]]
dat[1,1:dim(dat)[2]-1]-dat[22,1:dim(dat)[2]-1]
dat[1,1:dim(dat)[2]]-dat[22,1:dim(dat)[2]]
(dat[1,1:dim(dat)[2]-1]-dat[22,1:dim(dat)[2]-1])^2
sum((dat[1,1:dim(dat)[2]-1]-dat[22,1:dim(dat)[2]-1])^2)
sqrt(sum((dat[1,1:dim(dat)[2]-1]-dat[22,1:dim(dat)[2]-1])^2))
#computing siatance
for (train_sample in (test_set+1):dim(dat)[1]) {
dis=sqrt(sum((dat[1,1:dim(dat)[2]-1]-dat[train_sample,1:dim(dat)[2]-1])^2))
}
#computing siatance
for (train_sample in (test_set+1):dim(dat)[1]) {
dis=sqrt(sum((dat[1,1:dim(dat)[2]-1]-dat[train_sample,1:dim(dat)[2]-1])^2))
dist_val=c(dist_val,dis)
}
#distance vector
dist_val=c()
#computing siatance
for (train_sample in (test_set+1):dim(dat)[1]) {
dis=sqrt(sum((dat[1,1:dim(dat)[2]-1]-dat[train_sample,1:dim(dat)[2]-1])^2))
dist_val=c(dist_val,dis)
}
? min()
#computing siatance
for (train_sample in (test_set+1):dim(dat)[1]) {
dis=sqrt(sum((dat[1,1:dim(dat)[2]-1]-dat[train_sample,1:dim(dat)[2]-1])^2))
dist_val=c(dist_val,dis)
min_dis=min(dist_val)
}
#clear data from distance vector
dist_val=c()
#clear data from distance vector
dist_val=c()
#computing siatance
for (train_sample in (test_set+1):dim(dat)[1]) {
dis=sqrt(sum((dat[1,1:dim(dat)[2]-1]-dat[train_sample,1:dim(dat)[2]-1])^2))
dist_val=c(dist_val,dis)
min_dis=min(dist_val)
}
#clear data from distance vector
dist_val=c()
#computing siatance
for (train_sample in (test_set+1):dim(dat)[1]) {
dis=sqrt(sum((dat[1,1:dim(dat)[2]-1]-dat[train_sample,1:dim(dat)[2]-1])^2))
dist_val=c(dist_val,dis)
min_dis=min(dist_val)
#find min-dist index
min_indx=match(min_dis,dist_val)
}
dist_val[40]
#clear data from distance vector
dist_val=c()
#computing siatance
for (train_sample in (test_set+1):dim(dat)[1]) {
dis=sqrt(sum((dat[1,1:dim(dat)[2]-1]-dat[train_sample,1:dim(dat)[2]-1])^2))
dist_val=c(dist_val,dis)
min_dis=min(dist_val)
#find min-dist index
min_indx=match(min_dis,dist_val)
near_sample=min_indx+test_set
#pridiction
pred_lable=dat[near_sample,dim(dat)[2]]
}
for (test_sample in 1:test_set) {
for (train_sample in (test_set+1):dim(dat)[1]) {
dis=sqrt(sum((dat[test_sample,1:dim(dat)[2]-1]-dat[train_sample,1:dim(dat)[2]-1])^2))
dist_val=c(dist_val,dis)
min_dis=min(dist_val)
#find min-dist index
min_indx=match(min_dis,dist_val)
near_sample=min_indx+test_set
#pridiction
pred_lable=dat[near_sample,dim(dat)[2]]
pred_val=c(pred_val,pred_lable)
}
#clear data from distance vector
dist_val=c()
}
#prediction vecotr
pred_val=c()
for (test_sample in 1:test_set) {
for (train_sample in (test_set+1):dim(dat)[1]) {
dis=sqrt(sum((dat[test_sample,1:dim(dat)[2]-1]-dat[train_sample,1:dim(dat)[2]-1])^2))
dist_val=c(dist_val,dis)
min_dis=min(dist_val)
#find min-dist index
min_indx=match(min_dis,dist_val)
near_sample=min_indx+test_set
#pridiction
pred_lable=dat[near_sample,dim(dat)[2]]
pred_val=c(pred_val,pred_lable)
}
#clear data from distance vector
dist_val=c()
}
#read csv file
dat=read.csv("ML_2021.csv",header = TRUE)
test_set=dim(dat)[1]/5
#distance vector
dist_val=c()
#prediction vecotr
pred_val=c()
for (test_sample in 1:test_set) {
for (train_sample in (test_set+1):dim(dat)[1]) {
dis=sqrt(sum((dat[test_sample,1:dim(dat)[2]-1]-dat[train_sample,1:dim(dat)[2]-1])^2))
dist_val=c(dist_val,dis)
}
min_dis=min(dist_val)
#find min-dist index
min_indx=match(min_dis,dist_val)
near_sample=min_indx+test_set
#pridiction
pred_lable=dat[near_sample,dim(dat)[2]]
pred_val=c(pred_val,pred_lable)
#clear data from distance vector
dist_val=c()
}
pred_val
true_prediction=0
for (indx in 1:test_set) {
if (dat[indx,dim(dat)[2]]==pred_val[indx]) {
true_prediction=true_prediction+1
}
}
#acc
acc=(true_prediction/test_set)*100
acc
#read csv file
dat=read.csv("ML_2021.csv",header = TRUE)
test_set=dim(dat)[1]/5
#distance vector
dist_val=c()
dist_val_indx=c()
#prediction vecotr
pred_val=c()
k=0
for (test_sample in (test_set*k+1):(test_set*(k+1))) {
for (train_sample in 1:dim(dat)[1]) {
if (! train_sample %in% (test_set*k+1):(test_set*(k+1))) {
dis=sqrt(sum((dat[test_sample,1:dim(dat)[2]-1]-dat[train_sample,1:dim(dat)[2]-1])^2))
dist_val=c(dist_val,dis)
dist_val_indx=c(dist_val_indx,train_sample)
}
}
min_dis=min(dist_val)
#find min-dist index
min_indx=match(min_dis,dist_val)
near_sample=dist_val_indx[min_indx]
#pridiction
pred_lable=dat[near_sample,dim(dat)[2]]
pred_val=c(pred_val,pred_lable)
#clear data from distance vector
dist_val=c()
dist_val_indx=c()
k=k+1
}
#read csv file
dat=read.csv("ML_2021.csv",header = TRUE)
test_set=dim(dat)[1]/5
#distance vector
dist_val=c()
dist_val_indx=c()
#prediction vecotr
pred_val=c()
#bin index
k=0
for (test_sample in (test_set*k+1):(test_set*(k+1))) {
for (train_sample in 1:dim(dat)[1]) {
if (! train_sample %in% (test_set*k+1):(test_set*(k+1))) {
dis=sqrt(sum((dat[test_sample,1:dim(dat)[2]-1]-dat[train_sample,1:dim(dat)[2]-1])^2))
dist_val=c(dist_val,dis)
dist_val_indx=c(dist_val_indx,train_sample)
}
}
min_dis=min(dist_val)
#find min-dist index
min_indx=match(min_dis,dist_val)
near_sample=dist_val_indx[min_indx]
#pridiction
pred_lable=dat[near_sample,dim(dat)[2]]
pred_val=c(pred_val,pred_lable)
#clear data from distance vector
dist_val=c()
dist_val_indx=c()
k=k+1
print(k)
}
if (k<5) {
for (test_sample in (test_set*k+1):(test_set*(k+1))) {
for (train_sample in 1:dim(dat)[1]) {
if (! train_sample %in% (test_set*k+1):(test_set*(k+1))) {
dis=sqrt(sum((dat[test_sample,1:dim(dat)[2]-1]-dat[train_sample,1:dim(dat)[2]-1])^2))
dist_val=c(dist_val,dis)
dist_val_indx=c(dist_val_indx,train_sample)
}
}
min_dis=min(dist_val)
#find min-dist index
min_indx=match(min_dis,dist_val)
near_sample=dist_val_indx[min_indx]
#pridiction
pred_lable=dat[near_sample,dim(dat)[2]]
pred_val=c(pred_val,pred_lable)
#clear data from distance vector
dist_val=c()
dist_val_indx=c()
k=k+1
print(k)
}
}
#read csv file
dat=read.csv("ML_2021.csv",header = TRUE)
test_set=dim(dat)[1]/5
#distance vector
dist_val=c()
dist_val_indx=c()
#prediction vecotr
pred_val=c()
#bin index
k=0
if (k<5) {
for (test_sample in (test_set*k+1):(test_set*(k+1))) {
for (train_sample in 1:dim(dat)[1]) {
if (! train_sample %in% (test_set*k+1):(test_set*(k+1))) {
dis=sqrt(sum((dat[test_sample,1:dim(dat)[2]-1]-dat[train_sample,1:dim(dat)[2]-1])^2))
dist_val=c(dist_val,dis)
dist_val_indx=c(dist_val_indx,train_sample)
}
}
min_dis=min(dist_val)
#find min-dist index
min_indx=match(min_dis,dist_val)
near_sample=dist_val_indx[min_indx]
#pridiction
pred_lable=dat[near_sample,dim(dat)[2]]
pred_val=c(pred_val,pred_lable)
#clear data from distance vector
dist_val=c()
dist_val_indx=c()
k=k+1
print(k)
}
}
#read csv file
dat=read.csv("ML_2021.csv",header = TRUE)
test_set=dim(dat)[1]/5
#distance vector
dist_val=c()
dist_val_indx=c()
#prediction vecotr
pred_val=c()
#bin index
k=0
if (k<5) {
for (test_sample in (test_set*k+1):(test_set*(k+1))) {
for (train_sample in 1:dim(dat)[1]) {
if (! train_sample %in% (test_set*k+1):(test_set*(k+1))) {
dis=sqrt(sum((dat[test_sample,1:dim(dat)[2]-1]-dat[train_sample,1:dim(dat)[2]-1])^2))
dist_val=c(dist_val,dis)
dist_val_indx=c(dist_val_indx,train_sample)
}
}
min_dis=min(dist_val)
#find min-dist index
min_indx=match(min_dis,dist_val)
near_sample=dist_val_indx[min_indx]
#pridiction
pred_lable=dat[near_sample,dim(dat)[2]]
pred_val=c(pred_val,pred_lable)
#clear data from distance vector
dist_val=c()
dist_val_indx=c()
}
k=k+1
print(k)
}
#read csv file
dat=read.csv("ML_2021.csv",header = TRUE)
#sample numbers
dim(dat)[1]
test_set=dim(dat)[1]/5
#distance vector
dist_val=c()
dist_val_indx=c()
#prediction vecotr
pred_val=c()
#bin index
k=0
while (k<5) {
for (test_sample in (test_set*k+1):(test_set*(k+1))) {
for (train_sample in 1:dim(dat)[1]) {
if (! train_sample %in% (test_set*k+1):(test_set*(k+1))) {
dis=sqrt(sum((dat[test_sample,1:dim(dat)[2]-1]-dat[train_sample,1:dim(dat)[2]-1])^2))
dist_val=c(dist_val,dis)
dist_val_indx=c(dist_val_indx,train_sample)
}
}
min_dis=min(dist_val)
#find min-dist index
min_indx=match(min_dis,dist_val)
near_sample=dist_val_indx[min_indx]
#pridiction
pred_lable=dat[near_sample,dim(dat)[2]]
pred_val=c(pred_val,pred_lable)
#clear data from distance vector
dist_val=c()
dist_val_indx=c()
}
k=k+1
print(k)
}
pred_val
true_prediction=0
for (indx in 1:dim(dat)[1]) {
if (dat[indx,dim(dat)[2]]==pred_val[indx]) {
true_prediction=true_prediction+1
}
}
#acc
acc=(true_prediction/dim(dat)[1])*100
acc
min(1:5)
min(1:5,2)
pmin(1:5)
pmin(1:5,2)
numeric_vec=c(1,2,3,4,5)
for (i in 1:2) {
print(min(numeric_vec))
}
numeric_vec
numeric_vec=c(1,2,3,4,5)
for (i in 1:2) {
print(min(numeric_vec))
numeric_vec[match(min(numeric_vec),numeric_vec)]=max(numeric_vec)
}
knn_lable=c(dat[1:4,dim(dat)[2]])
knn_lable
max(knn_lable)
nearest_dis_indx=c(22,40,70)
knn_lable=c(dat[nearest_dis_indx,dim(dat)[2]])
knn_lable
#read csv file
dat=read.csv("ML_2021.csv",header = TRUE)
#sample numbers
dim(dat)[1]
test_set=dim(dat)[1]/5
#distance vector
dist_val=c()
dist_val_indx=c()
nearest_dis=c()
nearest_dis_indx=c()
#prediction vecotr
pred_val=c()
#bin index
k=0
#knn
knn=3
while (k<5) {
for (test_sample in (test_set*k+1):(test_set*(k+1))) {
for (train_sample in 1:dim(dat)[1]) {
if (! train_sample %in% (test_set*k+1):(test_set*(k+1))) {
dis=sqrt(sum((dat[test_sample,1:dim(dat)[2]-1]-dat[train_sample,1:dim(dat)[2]-1])^2))
dist_val=c(dist_val,dis)
dist_val_indx=c(dist_val_indx,train_sample)
}
}
for (indx in 1:knn) {
min_dis=min(dist_val)
#find min-dist index
min_indx=match(min_dis,dist_val)
nearest_dis=c(nearest_dis,min_dis)
nearest_dis_indx=c(nearest_dis_indx,dist_val_indx[min_indx])
#change value
dist_val[min_indx]=max(dist_val)
}
#pridiction
knn_lable=c(dat[nearest_dis_indx,dim(dat)[2]])
pred_lable=max(knn_lable)
pred_val=c(pred_val,pred_lable)
#clear data from distance vector
dist_val=c()
dist_val_indx=c()
nearest_dis=c()
nearest_dis_indx=c()
}
k=k+1
print(k)
}
true_prediction=0
for (indx in 1:dim(dat)[1]) {
if (dat[indx,dim(dat)[2]]==pred_val[indx]) {
true_prediction=true_prediction+1
}
}
#acc
acc=(true_prediction/dim(dat)[1])*100
acc
#read csv file
dat=read.csv("ML_2021.csv",header = TRUE)
test_set=dim(dat)[1]/5
#distance vector
dist_val=c()
dist_val_indx=c()
nearest_dis=c()
nearest_dis_indx=c()
#prediction vecotr
pred_val=c()
#bin index
k=0
#knn
knn=5
while (k<5) {
for (test_sample in (test_set*k+1):(test_set*(k+1))) {
for (train_sample in 1:dim(dat)[1]) {
if (! train_sample %in% (test_set*k+1):(test_set*(k+1))) {
dis=sqrt(sum((dat[test_sample,1:dim(dat)[2]-1]-dat[train_sample,1:dim(dat)[2]-1])^2))
dist_val=c(dist_val,dis)
dist_val_indx=c(dist_val_indx,train_sample)
}
}
for (indx in 1:knn) {
min_dis=min(dist_val)
#find min-dist index
min_indx=match(min_dis,dist_val)
nearest_dis=c(nearest_dis,min_dis)
nearest_dis_indx=c(nearest_dis_indx,dist_val_indx[min_indx])
#change value
dist_val[min_indx]=max(dist_val)
}
#pridiction
knn_lable=c(dat[nearest_dis_indx,dim(dat)[2]])
pred_lable=max(knn_lable)
pred_val=c(pred_val,pred_lable)
#clear data from distance vector
dist_val=c()
dist_val_indx=c()
nearest_dis=c()
nearest_dis_indx=c()
}
k=k+1
print(k)
}
true_prediction=0
for (indx in 1:dim(dat)[1]) {
if (dat[indx,dim(dat)[2]]==pred_val[indx]) {
true_prediction=true_prediction+1
}
}
#acc
acc=(true_prediction/dim(dat)[1])*100
acc
