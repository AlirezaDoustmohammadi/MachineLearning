acc_vector=c()
while (length(checked_sample)<length(sample)) {
#random generator
unchecked_sample=sample[! sample %in% checked_sample]
test_sample_vector=unchecked_sample[sample.int(length(unchecked_sample),21)]
checked_sample=c(checked_sample,test_sample_vector)
train_sample_vector=sample[! sample %in% test_sample_vector]
for (test_sample in test_sample_vector) {
for (train_sample in train_sample_vector) {
dis=sqrt(sum((dat[test_sample,1:dim(dat)[2]-1]-dat[train_sample,1:dim(dat)[2]-1])^2))
dist_val=c(dist_val,dis)
dist_val_indx=c(dist_val_indx,train_sample)
}
for (indx in 1:knn) {
min_dis=min(dist_val)
#find min-dist index
min_indx=match(min_dis,dist_val)
nearest_dis=c(nearest_dis,min_dis)
nearest_dis_indx=c(nearest_dis_indx,dist_val_indx[min_indx])
#change value
dist_val[min_indx]=max(dist_val)
}
#pridiction
knn_lable=c(dat[nearest_dis_indx,dim(dat)[2]])
pred_lable=max(knn_lable)
pred_val=c(pred_val,pred_lable)
#clear data from distance vector
dist_val=c()
dist_val_indx=c()
nearest_dis=c()
nearest_dis_indx=c()
}
true_prediction=0
for (indx in test_sample_vector) {
if (dat[indx,dim(dat)[2]]==pred_val[indx]) {
true_prediction=true_prediction+1
}
}
#acc
acc=(true_prediction/dim(dat)[1])*100
acc_vector=c(acc_vector,acc)
}
#read csv file
dat=read.csv("ML_2021.csv",header = TRUE)
#distance vector
dist_val=c()
dist_val_indx=c()
nearest_dis=c()
nearest_dis_indx=c()
#prediction vecotr
pred_val=c()
#computing diatance
#knn
knn=5
#random sample inde generator
sample=c(1:dim(dat)[1])
checked_sample=c()
unchecked_sample=c()
#acc vector
acc_vector=c()
while (length(checked_sample)<length(sample)) {
#random generator
unchecked_sample=sample[! sample %in% checked_sample]
test_sample_vector=unchecked_sample[sample.int(length(unchecked_sample),21)]
checked_sample=c(checked_sample,test_sample_vector)
train_sample_vector=sample[! sample %in% test_sample_vector]
for (test_sample in test_sample_vector) {
for (train_sample in train_sample_vector) {
dis=sqrt(sum((dat[test_sample,1:dim(dat)[2]-1]-dat[train_sample,1:dim(dat)[2]-1])^2))
dist_val=c(dist_val,dis)
dist_val_indx=c(dist_val_indx,train_sample)
}
for (indx in 1:knn) {
min_dis=min(dist_val)
#find min-dist index
min_indx=match(min_dis,dist_val)
nearest_dis=c(nearest_dis,min_dis)
nearest_dis_indx=c(nearest_dis_indx,dist_val_indx[min_indx])
#change value
dist_val[min_indx]=max(dist_val)
}
#pridiction
knn_lable=c(dat[nearest_dis_indx,dim(dat)[2]])
pred_lable=max(knn_lable)
pred_val=c(pred_val,pred_lable)
#clear data from distance vector
dist_val=c()
dist_val_indx=c()
nearest_dis=c()
nearest_dis_indx=c()
}
true_prediction=0
for (indx in length(test_sample_vector)) {
if (dat[test_sample_vector[indx],dim(dat)[2]]==pred_val[indx]) {
true_prediction=true_prediction+1
}
}
#acc
acc=(true_prediction/dim(dat)[1])*100
acc_vector=c(acc_vector,acc)
#clear prediction table
pred_val=c()
}
pred_val
acc_vector
mean(acc_vector)
final_acc=mean(acc_vector)
for (indx in length(test_sample_vector)) {
print(indx)
}
for (indx in 1:length(test_sample_vector)) {
print(indx)
}
#read csv file
dat=read.csv("ML_2021.csv",header = TRUE)
#distance vector
dist_val=c()
dist_val_indx=c()
nearest_dis=c()
nearest_dis_indx=c()
#prediction vecotr
pred_val=c()
#computing diatance
#knn
knn=5
#random sample inde generator
sample=c(1:dim(dat)[1])
checked_sample=c()
unchecked_sample=c()
#acc vector
acc_vector=c()
while (length(checked_sample)<length(sample)) {
#random generator
unchecked_sample=sample[! sample %in% checked_sample]
test_sample_vector=unchecked_sample[sample.int(length(unchecked_sample),21)]
checked_sample=c(checked_sample,test_sample_vector)
train_sample_vector=sample[! sample %in% test_sample_vector]
for (test_sample in test_sample_vector) {
for (train_sample in train_sample_vector) {
dis=sqrt(sum((dat[test_sample,1:dim(dat)[2]-1]-dat[train_sample,1:dim(dat)[2]-1])^2))
dist_val=c(dist_val,dis)
dist_val_indx=c(dist_val_indx,train_sample)
}
for (indx in 1:knn) {
min_dis=min(dist_val)
#find min-dist index
min_indx=match(min_dis,dist_val)
nearest_dis=c(nearest_dis,min_dis)
nearest_dis_indx=c(nearest_dis_indx,dist_val_indx[min_indx])
#change value
dist_val[min_indx]=max(dist_val)
}
#pridiction
knn_lable=c(dat[nearest_dis_indx,dim(dat)[2]])
pred_lable=max(knn_lable)
pred_val=c(pred_val,pred_lable)
#clear data from distance vector
dist_val=c()
dist_val_indx=c()
nearest_dis=c()
nearest_dis_indx=c()
}
true_prediction=0
for (indx in 1:length(test_sample_vector)) {
if (dat[test_sample_vector[indx],dim(dat)[2]]==pred_val[indx]) {
true_prediction=true_prediction+1
}
}
#acc
acc=(true_prediction/dim(dat)[1])*100
acc_vector=c(acc_vector,acc)
#clear prediction table
pred_val=c()
}
acc_vector
true_prediction=0
for (indx in 1:length(test_sample_vector)) {
if (dat[test_sample_vector[indx],dim(dat)[2]]==pred_val[indx]) {
true_prediction=true_prediction+1
}
}
fix(dat)
#read csv file
dat=read.csv("ML_2021.csv",header = TRUE)
#distance vector
dist_val=c()
dist_val_indx=c()
nearest_dis=c()
nearest_dis_indx=c()
#prediction vecotr
pred_val=c()
#computing diatance
#knn
knn=5
#random sample inde generator
sample=c(1:dim(dat)[1])
checked_sample=c()
unchecked_sample=c()
#acc vector
acc_vector=c()
while (length(checked_sample)<length(sample)) {
#random generator
unchecked_sample=sample[! sample %in% checked_sample]
test_sample_vector=unchecked_sample[sample.int(length(unchecked_sample),21)]
checked_sample=c(checked_sample,test_sample_vector)
train_sample_vector=sample[! sample %in% test_sample_vector]
for (test_sample in test_sample_vector) {
for (train_sample in train_sample_vector) {
dis=sqrt(sum((dat[test_sample,1:dim(dat)[2]-1]-dat[train_sample,1:dim(dat)[2]-1])^2))
dist_val=c(dist_val,dis)
dist_val_indx=c(dist_val_indx,train_sample)
}
for (indx in 1:knn) {
min_dis=min(dist_val)
#find min-dist index
min_indx=match(min_dis,dist_val)
nearest_dis=c(nearest_dis,min_dis)
nearest_dis_indx=c(nearest_dis_indx,dist_val_indx[min_indx])
#change value
dist_val[min_indx]=max(dist_val)
}
#pridiction
knn_lable=c(dat[nearest_dis_indx,dim(dat)[2]])
pred_lable=max(knn_lable)
pred_val=c(pred_val,pred_lable)
#clear data from distance vector
dist_val=c()
dist_val_indx=c()
nearest_dis=c()
nearest_dis_indx=c()
}
true_prediction=0
for (indx in 1:length(test_sample_vector)) {
if (dat[test_sample_vector[indx],dim(dat)[2]]==pred_val[indx]) {
print(dat[test_sample_vector[indx],dim(dat)[2]])
print(pred_val[indx])
true_prediction=true_prediction+1
}
}
print(true_prediction)
#acc
acc=(true_prediction/length(test_sample_vector))*100
acc_vector=c(acc_vector,acc)
#clear prediction table
pred_val=c()
}
acc_vector
final_acc=mean(acc_vector)
final_acc
order(acc_vector)
acc_vector[order(acc_vector)]
array1=c(3,6,2,7,1,5)
array2=c("H","W","T","R","O","B")
for (indx in order(array1)) {
print(indx)
}
sort_array1=c()
sort_array2=c()
for (indx in order(array1)) {
sort_array1=array1[indx]
sort_array2=array2[indx]
}
sort_array1
array1=c(3,6,2,7,1,5)
array2=c("H","W","T","R","O","B")
sort_array1=c()
sort_array2=c()
for (indx in order(array1)) {
sort_array1=c(sort_array1,array1[indx])
sort_array2=c(sort_array2,array2[indx])
}
sort_array1
sort_array2
#read csv file
dat=read.csv("ML_2021.csv",header = TRUE)
#distance vector
dist_val=c()
dist_val_indx=c()
nearest_dis=c()
nearest_dis_indx=c()
#prediction vecotr
pred_val=c()
#read csv file
dat=read.csv("ML_2021.csv",header = TRUE)
#distance vector
dist_val_indx=c()
#prediction vecotr
pred_val=c()
#computing diatance
#threshold
threshold=500
#random sample inde generator
sample=c(1:dim(dat)[1])
checked_sample=c()
unchecked_sample=c()
#acc vector
acc_vector=c()
while (length(checked_sample)<length(sample)) {
#random generator
unchecked_sample=sample[! sample %in% checked_sample]
test_sample_vector=unchecked_sample[sample.int(length(unchecked_sample),21)]
checked_sample=c(checked_sample,test_sample_vector)
train_sample_vector=sample[! sample %in% test_sample_vector]
for (test_sample in test_sample_vector) {
for (train_sample in train_sample_vector) {
dis=sqrt(sum((dat[test_sample,1:dim(dat)[2]-1]-dat[train_sample,1:dim(dat)[2]-1])^2))
if (dis < threshold) {
dist_val_indx=c(dist_val_indx,train_sample)
}
}
#pridiction
parizon_lable=c(dat[dist_val_indx,dim(dat)[2]])
pred_lable=max(parizon_lable)
pred_val=c(pred_val,pred_lable)
#clear data from distance vector
dist_val_indx=c()
}
true_prediction=0
for (indx in 1:length(test_sample_vector)) {
if (dat[test_sample_vector[indx],dim(dat)[2]]==pred_val[indx]) {
true_prediction=true_prediction+1
}
}
#acc
acc=(true_prediction/length(test_sample_vector))*100
acc_vector=c(acc_vector,acc)
#clear prediction table
pred_val=c()
}
a=c()
length(a)
a=c(1:5)
min(a)
match(a,min(a))
b=c("a")
b[match(a,min(a))]
length(b)
#read csv file
dat=read.csv("ML_2021.csv",header = TRUE)
#distance vector
dist_val=c()
dist_val_indx=c()
nearest_dis_indx=c()
#prediction vecotr
pred_val=c()
#computing diatance
#threshold
threshold=500
#random sample inde generator
sample=c(1:dim(dat)[1])
checked_sample=c()
unchecked_sample=c()
#acc vector
acc_vector=c()
while (length(checked_sample)<length(sample)) {
#random generator
unchecked_sample=sample[! sample %in% checked_sample]
test_sample_vector=unchecked_sample[sample.int(length(unchecked_sample),21)]
checked_sample=c(checked_sample,test_sample_vector)
train_sample_vector=sample[! sample %in% test_sample_vector]
for (test_sample in test_sample_vector) {
for (train_sample in train_sample_vector) {
dis=sqrt(sum((dat[test_sample,1:dim(dat)[2]-1]-dat[train_sample,1:dim(dat)[2]-1])^2))
dist_val=c(dist_val,dis)
dist_val_indx=c(dist_val_indx,train_sample)
if (dis < threshold) {
nearest_dis_indx=c(nearest_dis_indx,train_sample)
}
}
if (length(nearest_dis_indx)==0) {
nearest_dis_indx=c(nearest_dis_indx,dist_val_indx[match(dist_val,min(dist_val))])
}
#pridiction
parizon_lable=c(dat[nearest_dis_indx,dim(dat)[2]])
pred_lable=max(parizon_lable)
pred_val=c(pred_val,pred_lable)
#clear data from distance vector
dist_val=c()
dist_val_indx=c()
nearest_dis_indx=c()
}
true_prediction=0
for (indx in 1:length(test_sample_vector)) {
if (dat[test_sample_vector[indx],dim(dat)[2]]==pred_val[indx]) {
true_prediction=true_prediction+1
}
}
#acc
acc=(true_prediction/length(test_sample_vector))*100
acc_vector=c(acc_vector,acc)
#clear prediction table
pred_val=c()
}
#read csv file
dat=read.csv("ML_2021.csv",header = TRUE)
#distance vector
dist_val=c()
dist_val_indx=c()
nearest_dis_indx=c()
#prediction vecotr
pred_val=c()
#computing diatance
#threshold
threshold=500
#random sample inde generator
sample=c(1:dim(dat)[1])
checked_sample=c()
unchecked_sample=c()
#acc vector
acc_vector=c()
while (length(checked_sample)<length(sample)) {
#random generator
unchecked_sample=sample[! sample %in% checked_sample]
test_sample_vector=unchecked_sample[sample.int(length(unchecked_sample),21)]
checked_sample=c(checked_sample,test_sample_vector)
train_sample_vector=sample[! sample %in% test_sample_vector]
for (test_sample in test_sample_vector) {
for (train_sample in train_sample_vector) {
dis=sqrt(sum((dat[test_sample,1:dim(dat)[2]-1]-dat[train_sample,1:dim(dat)[2]-1])^2))
dist_val=c(dist_val,dis)
dist_val_indx=c(dist_val_indx,train_sample)
if (dis < threshold) {
nearest_dis_indx=c(nearest_dis_indx,train_sample)
}
}
if (length(nearest_dis_indx)==0) {
nearest_dis_indx=c(nearest_dis_indx,dist_val_indx[match(dist_val,min(dist_val))])
}
#pridiction
parizon_lable=c(dat[nearest_dis_indx,dim(dat)[2]])
print("parizon: ")
print(parizon_lable)
pred_lable=max(parizon_lable)
pred_val=c(pred_val,pred_lable)
print(pred_val)
#clear data from distance vector
dist_val=c()
dist_val_indx=c()
nearest_dis_indx=c()
}
true_prediction=0
for (indx in 1:length(test_sample_vector)) {
if (dat[test_sample_vector[indx],dim(dat)[2]]==pred_val[indx]) {
true_prediction=true_prediction+1
}
}
#acc
acc=(true_prediction/length(test_sample_vector))*100
acc_vector=c(acc_vector,acc)
#clear prediction table
pred_val=c()
}
acc_vector
final_acc=mean(acc_vector)
final_acc
#read csv file
dat=read.csv("ML_2021.csv",header = TRUE)
#distance vector
dist_val=c()
dist_val_indx=c()
nearest_dis_indx=c()
#prediction vecotr
pred_val=c()
#computing diatance
#threshold
threshold=500
#random sample inde generator
sample=c(1:dim(dat)[1])
checked_sample=c()
unchecked_sample=c()
#acc vector
acc_vector=c()
while (length(checked_sample)<length(sample)) {
#random generator
unchecked_sample=sample[! sample %in% checked_sample]
test_sample_vector=unchecked_sample[sample.int(length(unchecked_sample),21)]
checked_sample=c(checked_sample,test_sample_vector)
train_sample_vector=sample[! sample %in% test_sample_vector]
for (test_sample in test_sample_vector) {
for (train_sample in train_sample_vector) {
dis=sqrt(sum((dat[test_sample,1:dim(dat)[2]-1]-dat[train_sample,1:dim(dat)[2]-1])^2))
dist_val=c(dist_val,dis)
dist_val_indx=c(dist_val_indx,train_sample)
if (dis < threshold) {
nearest_dis_indx=c(nearest_dis_indx,train_sample)
}
}
if (length(nearest_dis_indx)==0) {
nearest_dis_indx=c(nearest_dis_indx,dist_val_indx[match(dist_val,min(dist_val))])
}
#pridiction
parizon_lable=c(dat[nearest_dis_indx,dim(dat)[2]])
pred_lable=max(parizon_lable)
pred_val=c(pred_val,pred_lable)
#clear data from distance vector
dist_val=c()
dist_val_indx=c()
nearest_dis_indx=c()
}
true_prediction=0
for (indx in 1:length(test_sample_vector)) {
if (dat[test_sample_vector[indx],dim(dat)[2]]==pred_val[indx]) {
true_prediction=true_prediction+1
}
}
#acc
acc=(true_prediction/length(test_sample_vector))*100
acc_vector=c(acc_vector,acc)
#clear prediction table
pred_val=c()
}
final_acc=mean(acc_vector)
